// Objective-C API for talking to github.com/TBD54566975/ssi-sdk-mobile/src/ssi Go package.
//   gobind -lang=objc github.com/TBD54566975/ssi-sdk-mobile/src/ssi
//
// File is generated by gobind. Do not edit.

#ifndef __Ssi_H__
#define __Ssi_H__

#import <Foundation/Foundation.h>
#include "ref.h"
#include "Universe.objc.h"


@class SsiCryptoKeyPair;
@class SsiDecodedDIDKey;
@class SsiServiceSetArray;
@class SsiStringArray;
@class SsiVerificationMethodArray;
@class SsiVerificationMethodSetArray;

@interface SsiCryptoKeyPair : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull keyType;
@property (nonatomic) NSData* _Nullable privKey;
@property (nonatomic) NSData* _Nullable pubKey;
@end

@interface SsiDecodedDIDKey : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSData* _Nullable data;
@property (nonatomic) NSString* _Nonnull keyType;
@end

@interface SsiServiceSetArray : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method ServiceSetArray.Add with unsupported parameter or return types

// skipped method ServiceSetArray.Get with unsupported parameter or return types

- (long)size;
@end

@interface SsiStringArray : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (SsiStringArray* _Nullable)add:(NSString* _Nullable)s;
- (NSString* _Nonnull)get:(long)i;
- (long)size;
@end

@interface SsiVerificationMethodArray : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method VerificationMethodArray.Add with unsupported parameter or return types

// skipped method VerificationMethodArray.Get with unsupported parameter or return types

- (long)size;
@end

@interface SsiVerificationMethodSetArray : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method VerificationMethodSetArray.Add with unsupported parameter or return types

// skipped method VerificationMethodSetArray.Get with unsupported parameter or return types

- (long)size;
@end

/**
 * CreateDIDKey constructs a did:key from a specific key type and its corresponding public key
This method does not attempt to validate that the provided public key is of the specified key type.
A safer method is `GenerateDIDKey` which handles key generation based on the provided key type.
 */
FOUNDATION_EXPORT NSString* _Nonnull SsiCreateDIDKey(NSString* _Nullable kt, NSData* _Nullable publicKey, NSError* _Nullable* _Nullable error);

/**
 * DecodeDIDKey Decode takes a did:key and returns the underlying public key value as bytes, the LD key type, and a possible error
 */
FOUNDATION_EXPORT SsiDecodedDIDKey* _Nullable SsiDecodeDIDKey(NSString* _Nullable d, NSError* _Nullable* _Nullable error);

/**
 * ExpandDIDKey Expand turns the DID key into a compliant DID Document
 */
FOUNDATION_EXPORT NSData* _Nullable SsiExpandDIDKey(NSString* _Nullable d, NSError* _Nullable* _Nullable error);

/**
 * GenerateDIDKey takes in a key type value that this library supports and constructs a conformant did:key identifier.
The function returns the marshaled JSON representation of `generateDIDKeyResult`.
 */
FOUNDATION_EXPORT NSData* _Nullable SsiGenerateDIDKey(NSString* _Nullable kt, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT SsiCryptoKeyPair* _Nullable SsiGenerateEd25519Key(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT SsiCryptoKeyPair* _Nullable SsiGenerateP256Key(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT SsiCryptoKeyPair* _Nullable SsiGenerateP384Key(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT SsiCryptoKeyPair* _Nullable SsiGenerateP521Key(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT SsiCryptoKeyPair* _Nullable SsiGenerateRSA2048Key(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT SsiCryptoKeyPair* _Nullable SsiGenerateSecp256k1Key(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT SsiCryptoKeyPair* _Nullable SsiGenerateX25519Key(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT SsiStringArray* _Nullable SsiGetSupportedKeyTypes(void);

FOUNDATION_EXPORT SsiStringArray* _Nullable SsiGetSupportedSignatureAlgs(void);

FOUNDATION_EXPORT BOOL SsiIsSupportedKeyType(NSString* _Nullable kt);

FOUNDATION_EXPORT BOOL SsiIsSupportedSignatureAlg(NSString* _Nullable sa);

/**
 * SignVerifiableCredentialJWT takes in a key ID, private JWK, and a verifiable credential
The keyID and privateJWK are used for signing the credential, which will be packaged as
a JWT according to the VC-JWT 1.0 specification.
The function returns a string representation of a JWT.
 */
FOUNDATION_EXPORT NSString* _Nonnull SsiSignVerifiableCredentialJWT(NSString* _Nullable keyID, NSData* _Nullable privateJSONWebKey, NSData* _Nullable vcJSONBytes, NSError* _Nullable* _Nullable error);

/**
 * VerifyVerifiableCredentialJWT takes in a key ID, public JWK, and a JWT string
The keyID and publicJWK are used for verifying the JWT.
The function returns the marshaled JSON representation of the verified Verifiable Credential.
 */
FOUNDATION_EXPORT NSData* _Nullable SsiVerifyVerifiableCredentialJWT(NSString* _Nullable keyID, NSData* _Nullable publicJSONWebKey, NSString* _Nullable jwt, NSError* _Nullable* _Nullable error);

#endif
