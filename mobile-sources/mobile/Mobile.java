// Code generated by gobind. DO NOT EDIT.

// Java class mobile.Mobile is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java github.com/TBD54566975/ssi-sdk-mobile/mobile
package mobile;

import go.Seq;

public abstract class Mobile {
	static {
		Seq.touch(); // for loading the native library
		_init();
	}
	
	private Mobile() {} // uninstantiable
	
	// touch is called from other bound packages to initialize this package
	public static void touch() {}
	
	private static native void _init();
	
	private static final class proxyStringCollection implements Seq.Proxy, StringCollection {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyStringCollection(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native StringCollection add(String s);
		public native String get(long i);
		public native long size();
	}
	
	
	/**
	 * CreateDIDKey constructs a did:key from a specific key type and its corresponding public key
	This method does not attempt to validate that the provided public key is of the specified key type.
	A safer method is `GenerateDIDKey` which handles key generation based on the provided key type.
	 */
	public static native String createDIDKey(String kt, byte[] publicKey) throws Exception;
	/**
	 * DecodeDIDKey Decode takes a did:key and returns the underlying public key value as bytes, the LD key type, and a possible error
	 */
	public static native DecodedDIDKey decodeDIDKey(String d) throws Exception;
	/**
	 * ExpandDIDKey Expand turns the DID key into a compliant DID Document
	 */
	public static native DIDDocumentMobile expandDIDKey(String d) throws Exception;
	/**
	 * GenerateDIDKey takes in a key type value that this library supports and constructs a conformant did:key identifier.
	The function returns the associated private key value cast to the generic golang crypto.PrivateKey interface.
	To use the private key, it is recommended to re-cast to the associated type. For example, called with the input
	for a secp256k1 key:
	privKey, didKey, err := GenerateDIDKey(Secp256k1)
	if err != nil { ... }
	// where secp is an import alias to the secp256k1 library we use &#34;github.com/decred/dcrd/dcrec/secp256k1/v4&#34;
	secpPrivKey, ok := privKey.(secp.PrivateKey)
	if !ok { ... }
	 */
	public static native DIDKeyWrapper generateDIDKey(String kt) throws Exception;
	public static native CryptoKeyPair generateEd25519Key() throws Exception;
	public static native ECDSAKeyPair generateP224Key() throws Exception;
	public static native ECDSAKeyPair generateP256Key() throws Exception;
	public static native ECDSAKeyPair generateP384Key() throws Exception;
	public static native ECDSAKeyPair generateP521Key() throws Exception;
	public static native RSAKeyPair generateRSA2048Key() throws Exception;
	public static native ECDSAKeyPair generateSecp256k1Key() throws Exception;
	public static native CryptoKeyPair generateX25519Key() throws Exception;
	public static native StringArray getSupportedKeyTypes();
	public static native StringArray getSupportedSignatureAlgs();
	public static native boolean isSupportedKeyType(String kt);
	public static native boolean isSupportedSignatureAlg(String sa);
}
