// Code generated by gobind. DO NOT EDIT.

// Java class mobile.RSAKeyPair is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java github.com/TBD54566975/ssi-sdk-mobile/mobile
package mobile;

import go.Seq;

public final class RSAKeyPair implements Seq.Proxy {
	static { Mobile.touch(); }
	
	private final int refnum;
	
	@Override public final int incRefnum() {
	      Seq.incGoRef(refnum, this);
	      return refnum;
	}
	
	RSAKeyPair(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
	
	public RSAKeyPair() { this.refnum = __New(); Seq.trackGoRef(refnum, this); }
	
	private static native int __New();
	
	public final native long getPubKeyN();
	public final native void setPubKeyN(long v);
	
	public final native long getPubKeyE();
	public final native void setPubKeyE(long v);
	
	public final native long getPrivKeyD();
	public final native void setPrivKeyD(long v);
	
	// skipped field RSAKeyPair.Primes with unsupported type: []int64
	
	@Override public boolean equals(Object o) {
		if (o == null || !(o instanceof RSAKeyPair)) {
		    return false;
		}
		RSAKeyPair that = (RSAKeyPair)o;
		long thisPubKeyN = getPubKeyN();
		long thatPubKeyN = that.getPubKeyN();
		if (thisPubKeyN != thatPubKeyN) {
		    return false;
		}
		long thisPubKeyE = getPubKeyE();
		long thatPubKeyE = that.getPubKeyE();
		if (thisPubKeyE != thatPubKeyE) {
		    return false;
		}
		long thisPrivKeyD = getPrivKeyD();
		long thatPrivKeyD = that.getPrivKeyD();
		if (thisPrivKeyD != thatPrivKeyD) {
		    return false;
		}
		// skipped field RSAKeyPair.Primes with unsupported type: []int64
		
		return true;
	}
	
	@Override public int hashCode() {
	    return java.util.Arrays.hashCode(new Object[] {getPubKeyN(), getPubKeyE(), getPrivKeyD()});
	}
	
	@Override public String toString() {
		StringBuilder b = new StringBuilder();
		b.append("RSAKeyPair").append("{");
		b.append("PubKeyN:").append(getPubKeyN()).append(",");
		b.append("PubKeyE:").append(getPubKeyE()).append(",");
		b.append("PrivKeyD:").append(getPrivKeyD()).append(",");
		return b.append("}").toString();
	}
}

